import java.util.*;

public class BFSMatrix {
    public static int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;
        if (grid[0][0] == 1 || grid[n - 1][n - 1] == 1) return -1;

        int[][] directions = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0});
        grid[0][0] = 1; // Mark as visited

        int distance = 1;
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] cell = queue.poll();
                int x = cell[0], y = cell[1];
                if (x == n - 1 && y == n - 1) return distance;

                for (int[] dir : directions) {
                    int nx = x + dir[0], ny = y + dir[1];
                    if (nx >= 0 && ny >= 0 && nx < n && ny < n && grid[nx][ny] == 0) {
                        grid[nx][ny] = 1; // Mark as visited
                        queue.offer(new int[]{nx, ny});
                    }
                }
            }
            distance++;
        }
        return -1;
    }

    public static void main(String[] args) {
        int[][] grid = {
            {0, 1, 0},
            {1, 0, 0},
            {0, 1, 0}
        };
        System.out.println("Shortest Path Length: " + shortestPathBinaryMatrix(grid));
    }
}
